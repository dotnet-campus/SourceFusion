<Project>

  <!--第二阶段，创建 SourceFusion 需要的文件夹-->
  <Target Name="_SourceFusionEnsureToolPath">
    <PropertyGroup>
      <!-- 我们使用 $(MSBuildRuntimeType) 来判断编译器是 .NET Core 的还是 .NET Framework 的。-->
      <UseDotNetCore Condition=" '$(MSBuildRuntimeType)' == 'Core'">True</UseDotNetCore>
      <UseDotNetCore Condition=" '$(MSBuildRuntimeType)' != 'Core'">False</UseDotNetCore>
    </PropertyGroup>
    <PropertyGroup Condition=" $(IsInDemoToolDebugMode) != 'True' ">
      <TransformCodeToolCommand>&quot;$(MSBuildThisFileDirectory)..\tools\net48\codet.exe&quot;</TransformCodeToolCommand>
    </PropertyGroup>
    <PropertyGroup Condition=" $(UseDotNetCore) == 'True' ">
      <TransformCodeToolCommand>dotnet &quot;$(MSBuildThisFileDirectory)..\tools\netcoreapp3.1\codet.dll&quot;</TransformCodeToolCommand>
    </PropertyGroup>
    <PropertyGroup>
      <_SourceFusionDefaultWorkingFolder Condition="'$(_SourceFusionDefaultWorkingFolder)' == ''">obj\$(Configuration)\</_SourceFusionDefaultWorkingFolder>
      <SourceFusionWorkingFolder Condition="'$(SourceFusionWorkingFolder)' == ''">$(_SourceFusionDefaultWorkingFolder)</SourceFusionWorkingFolder>
      <SourceFusionToolsFolder>$(SourceFusionWorkingFolder)SourceFusion.Tools\</SourceFusionToolsFolder>
      <SourceFusionGeneratedCodeFolder>$(SourceFusionWorkingFolder)SourceFusion.GeneratedCodes\</SourceFusionGeneratedCodeFolder>
    </PropertyGroup>
  </Target>

  <!--第一阶段，创建 SourceFusion 需要的文件夹-->
  <Target Name="_SourceFusionCreateDirectories"
          DependsOnTargets="_SourceFusionEnsureToolPath">
    <ItemGroup>
      <SourceFusionDirectory Include="$(SourceFusionWorkingFolder)" />
      <SourceFusionDirectory Include="$(SourceFusionToolsFolder)" />
      <SourceFusionDirectory Include="$(SourceFusionGeneratedCodeFolder)" />
    </ItemGroup>
    <MakeDir Directories="@(SourceFusionDirectory)" ContinueOnError="false" />
  </Target>

  <!--第二阶段，写入 SourceFusion 需要的命令行参数-->
  <Target Name="_SourceFusionWriteArgs"
          DependsOnTargets="_SourceFusionCreateDirectories">
    <PropertyGroup>
      <SourceFusionProjectPropertyFile Condition=" '$(SourceFusionProjectPropertyFile)' == '' ">$(SourceFusionToolsFolder)CommandArgs.txt</SourceFusionProjectPropertyFile>
    </PropertyGroup>
    <ItemGroup>
      <!--这里正在按格式编写配置文件，配置文件尚未开源，所以暂时没有名字。-->
      <SourceFusionCommandArgLine Include=">" />
      <SourceFusionCommandArgLine Include="RootNamespace" />
      <SourceFusionCommandArgLine Include="$(RootNamespace)" />
      <SourceFusionCommandArgLine Include=">" />
      <SourceFusionCommandArgLine Include="Compile" />
      <SourceFusionCommandArgLine Include="@(Compile)" />
      <SourceFusionCommandArgLine Include=">" />
      <SourceFusionCommandArgLine Include="PrecompileFilter" />
      <SourceFusionCommandArgLine Include="@(PrecompileFilter)" />
      <SourceFusionCommandArgLine Include=">" />
      <SourceFusionCommandArgLine Include="ReferencePath" />
      <SourceFusionCommandArgLine Include="@(ReferencePath)" />
      <SourceFusionCommandArgLine Include=">" />
    </ItemGroup>
    <WriteLinesToFile File="$(SourceFusionProjectPropertyFile)" Lines="@(SourceFusionCommandArgLine)" Overwrite="True" />
  </Target>

  <!--第二阶段，进行重新编译测试-->
  <Target Name="_SourceFusionRebuildingTest"
          DependsOnTargets="_SourceFusionCreateDirectories"
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="$(SourceFusionToolsFolder)RebuildingTest.txt">
    <ItemGroup>
      <RebuildingTestLine Include="true" />
    </ItemGroup>
    <CallTarget Targets="_SourceFusionRebuildingTestInitialize" />
    <WriteLinesToFile File="$(SourceFusionToolsFolder)RebuildingTest.txt" Lines="@(RebuildingTestLine)" Overwrite="True" />
  </Target>

  <Target Name="_SourceFusionRebuildingTestInitialize">
    <PropertyGroup>
      <SourceFusionRebuildRequired>true</SourceFusionRebuildRequired>
    </PropertyGroup>
  </Target>

  <!--第三阶段，执行 SourceFusion-->
  <Target Name="_SourceFusionGenerateCode"
          DependsOnTargets="_SourceFusionWriteArgs;_SourceFusionRebuildingTest">
    <PropertyGroup>
      <SourceFusionRebuildRequired Condition="'$(SourceFusionRebuildRequired)' == ''">false</SourceFusionRebuildRequired>
    </PropertyGroup>
    <Exec ConsoleToMSBuild="True"
          Command="$(TransformCodeToolCommand) &quot;$(MSBuildProjectDirectory)&quot; -t $(SourceFusionToolsFolder) -c $(SourceFusionGeneratedCodeFolder) -p &quot;$(SourceFusionProjectPropertyFile)&quot; -s $(DefineConstants) --rebuild $(SourceFusionRebuildRequired)">
      <Output TaskParameter="ConsoleOutput" PropertyName="_SourceFusionOutputOfGenerateCode" />
      <Output TaskParameter="ExitCode" PropertyName="_SourceFusionMainExitCode" />
    </Exec>
  </Target>

  <!--第四阶段，使用 SourceFusion 生成的新源码-->
  <Target Name="_SourceFusionIncludeGeneratedCode"
          DependsOnTargets="_SourceFusionGenerateCode"
          BeforeTargets="CoreCompile">
    <CreateItem Include="$(_SourceFusionOutputOfGenerateCode)">
      <Output TaskParameter="Include" ItemName="_SourceFusionExcludedCompileFile" />
    </CreateItem>
    <ItemGroup>
      <_SourceFusionIncludedCompileFile Include="$(SourceFusionGeneratedCodeFolder)\*.cs" />
      <Compile Include="@(_SourceFusionIncludedCompileFile)" />
      <Compile Remove="@(_SourceFusionExcludedCompileFile)" />
    </ItemGroup>
    <Message Condition=" '$(SourceFusionRebuildRequired)' == 'true' " Importance="High" Text="引入新的文件：@(_SourceFusionIncludedCompileFile)" />
    <Message Condition=" '$(SourceFusionRebuildRequired)' == 'true' " Importance="High" Text="排除旧的文件：@(_SourceFusionExcludedCompileFile)" />
    <Message Condition=" '$(SourceFusionRebuildRequired)' != 'true' " Text="引入新的文件：@(_SourceFusionIncludedCompileFile)" />
    <Message Condition=" '$(SourceFusionRebuildRequired)' != 'true' " Text="排除旧的文件：@(_SourceFusionExcludedCompileFile)" />
  </Target>

  <!--添加清理 SourceFusion 的依赖-->
  <PropertyGroup>
    <CleanDependsOn>$(CleanDependsOn);_SourceFusionClean</CleanDependsOn>
  </PropertyGroup>

  <!--清理 SourceFusion 计算所得的文件-->
  <Target Name="_SourceFusionClean">
    <PropertyGroup>
      <_SourceFusionDefaultWorkingFolder Condition="'$(_SourceFusionDefaultWorkingFolder)' == ''">obj\$(Configuration)\</_SourceFusionDefaultWorkingFolder>
      <SourceFusionWorkingFolder Condition="'$(SourceFusionWorkingFolder)' == ''">$(_SourceFusionDefaultWorkingFolder)</SourceFusionWorkingFolder>
      <SourceFusionToolsFolder>$(SourceFusionWorkingFolder)SourceFusion.Tools\</SourceFusionToolsFolder>
      <SourceFusionGeneratedCodeFolder>$(SourceFusionWorkingFolder)SourceFusion.GeneratedCodes\</SourceFusionGeneratedCodeFolder>
    </PropertyGroup>
    <ItemGroup>
      <_SourceFusionFilesToDelete Include="$(SourceFusionToolsFolder)*" />
      <_SourceFusionFilesToDelete Include="$(SourceFusionGeneratedCodeFolder)*" />
    </ItemGroup>
    <!-- 仅仅删除文件夹中的文件，因为怀疑直接删除文件夹会触发 Windows 10 中的某个 bug，导致无法删除。 -->
    <Delete Files="$(_SourceFusionFilesToDelete)" />
    <Message Text="清理文件夹：$(SourceFusionToolsFolder);$(SourceFusionGeneratedCodeFolder)" />
  </Target>

</Project>